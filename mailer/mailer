#! /usr/bin/perl

use strict;
use Getopt::Long;
use Net::SMTP;
use stars;
#################################################################
# mailer
$::Version  = '$Revision: 1.1 $';
$::Version .= '$Date: 2010-07-20 06:33:08 $';
#
$::Version =~ s/\$//g;
#################################################################
## ToDo: Set parameters here.
$::NodeName   = 'mailer';        #Default node name.
$::Server     = 'localhost';        #Default stars server.
#################################################################
$::Debug      = ''; #This variable is used for debug mode.
                    # You can use like..
                    # if($::Debug){blha-blah-blah;}
require 'config.pl';

## ToDo: You can set option switchs. See help 'Getopt::Long'.
GetOptions(
'd'      => \$::Debug,
'node=s' => \$::NodeName,
'h'      => \&usage,
) or die "Bad switch.\n";

if($_ = shift(@ARGV)){$::Server = $_;}

## Open Stars server. $::tak is a Stars object.
$::tak = stars->new($::NodeName, $::Server)
	or die "Could not connect Stars server";


$::tak->addcallback(\&handler);
stars->Mainloop();

exit(1);

# Print usage. ---------------------------------------------
sub usage{
## Todo: Please modify help message for "-h" option.

print <<__USAGE__;
$0 $::Version
Usage: $0 [-h] [-d] [-node MyNodeName] [StarsServer]
       -h   Show this help.
       -d   Run with debug mode.
__USAGE__

exit(0);
}


# Command handler from Stars server ------------------------
sub handler{
## ToDo: Please modify handler sub routine.
##  (The handler sub routine will be called when client
##  receives a message from a Stars server.)
## Please substitute return value of your own function into "$rt".
## Or, if "error", please substitute ''.
##  $::Error is used for error message.

	my ($from, $to, $mess) = @_;
	my $rt;
	if($::Debug){
		print "STARS RCV: $from>$to $mess\n";
	}

## Handle received messges ##
	if($mess eq 'hello'){
		$rt="nice to meet you.";
	}elsif($mess eq 'help'){
		$rt="help hello getversion SendMail";
	}elsif($mess eq 'getversion'){
		$rt=$::Version;
	}elsif($mess =~ '^SendMail\s+(.+)'){
		$rt=SendMail($1);
		$mess = "SendMail";
	}elsif($mess =~ /^[_@]/){
		return;
	}else{
		$::Error = "Bad command or parameter.";
		$rt = '';
	}

## Response ##
	if($rt eq ''){
		$::tak->Send("$to>$from \@$mess Er: $::Error");
		if($::Debug){
			print "STARS SND: $to>$from \@$mess Er: $::Error\n";
		}
	}else{
		$::tak->Send("$to>$from \@$mess $rt"); 
		if($::Debug){
			print "STARS SND: $to>$from \@$mess $rt\n";
		}
	}
}


## SendMail
sub SendMail{
	my $str    = shift;
	my @mbuf   = split(/\\n/, $str);
	my $from   = '';
	my $to     = '';
	my $mhead  = '';
	my $mbody  = '';
	my $lp;
	for $lp (@mbuf){
		if($mbody eq ''){
			if($lp =~ /^From:\s+(.*)/i){
				$from = $1;
			}elsif( $lp =~ /^To:\s+(.*)/i){
				$to = $1;
			}elsif(!($lp =~ /^\t/) and !($lp =~ /^[A-Za-z\-]+: /)){
				if($lp ne ''){$mbody .= "\n";}
				$mbody .= "$lp\n";
				next;
			}
			$mhead .= "$lp\n";
		}else{
			$mbody .= "$lp\n";
		}
	}

	if($from eq ''){
		$::Error = 'Bad from address';
		return('');
	}

	if($to eq ''){
		$::Error = 'Bad to address';
	}

	$from = get_mailfrom($from);

	my $m=Net::SMTP->new($::SMTPSERVER, Hello => $::LOCALHOST);
	unless($m){$::Error = "new: $!"; return('');}

	unless($m->mail($from)){$::Error = "mail from: $!"; return('');}

	for $lp (split(/\s*,\s*/, $to)){
		unless($m->to($lp)){$::Error = "mail to: $!"; return('');}
	}

	unless($m->data()){$::Error = "data: $!"; return('');}
	unless($m->datasend($mhead)){$::Error = "datasend header: $!"; return('');}
	unless($m->datasend($mbody)){$::Error = "datasend body: $!"; return('');}
	unless($m->dataend()){$::Error = "dataend: $!"; return('');}
	unless($m->quit){$::Error = "quit: $!"; return('');}

	return('Ok:');
}


sub get_mailfrom{
	my $b=shift(@_);
	if($b =~ /<\s*(\S+)\s*>/){return("$1");}
	$b =~ s/\(.*\)//;
	$b =~ s/ //g;
	return("$b");
}
