#! /usr/bin/perl

use strict;
use Getopt::Long;
use stars;
#################################################################
# streg
# $Revision: 1.1 $
# $Date: 2010-01-19 03:02:34 $
#################################################################
## ToDo: Set parameters here.
$::NodeName   = 'streg';        #Default node name.
$::Server     = 'localhost';        #Default stars server.
$::RegFile   = 'reg.txt';      #Registry file
$::CacheInterval = 5;         #Interval time for save cache;
#################################################################
$::Debug      = ''; #This variable is used for debug mode.
                    # You can use like..
                    # if($::Debug){blha-blah-blah;}

## ToDo: You can set option switchs. See help 'Getopt::Long'.
GetOptions(
'd'      => \$::Debug,
'node=s' => \$::NodeName,
'h'      => \&usage,
'file=s' => \$::RegFile
) or die "Bad switch.\n";

if($_ = shift(@ARGV)){$::Server = $_;}

##Init variables
%::Reg=();        #cache
%::Flg=();        #Flag of "flgon" command.
$::FlgChgd = 0;   #Flag which means some chache data has been changed.

## Open Stars server. $::tak is a Stars object.
$::tak = stars->new($::NodeName, $::Server)
	or die "Could not connect Stars server";


$::tak->addcallback(\&handler);
loadcache();
stars->Mainloop(\&interval, \$::CacheInterval);
savecache();
exit(1);

# Print usage. ---------------------------------------------
sub usage{
## Todo: Please modify help message for "-h" option.
  print "Usage: streg [-h] [-d] [-node MyNodeName] [StarsServer]\n";
  print "       -h  Show this help.\n";
  print "       -d  Run with debug mode.\n";
  print "       -node mynodename  Define my nodename to mynodename.\n";
  print "       -file regfilename  Define file name for registry.\n";
  exit(0);
}


# Command handler from Stars server ------------------------
sub handler{
## ToDo: Please modify handler sub routine.
##  (The handler sub routine will be called when client
##  receives a message from a Stars server.)
## Please substitute return value of your own function into "$rt".
## Or, if "error", please substitute ''.
##  $::Error is used for error message.

	my ($from, $to, $mess) = @_;
	my $rt;
	if($::Debug){
		print "STARS RCV: $from>$to $mess\n";
	}

## Handle received messges ##
	if($to eq $::NodeName){
		if($mess eq 'hello'){
			$rt="nice to meet you.";
		}elsif($mess eq 'help'){
			$rt="help hello GetValue SetValue GetValueRegex GetKey CreateValue UndefValue flgon flgoff listnodes LoadValues SaveValues";
		}elsif($mess =~ /^[Gg]et(Value|cache)\s+(.+)/){
			$rt=getcache($to, $2);
		}elsif($mess =~ /^[Gg]et(Value|cache)Regex\s+(.+)/){
			$rt=getcacheregex($to, $2);
		}elsif($mess =~ /^[Gg]etKey\s+(.+)/){
			$rt=getkey($to, $1);
		}elsif($mess =~ /^[Ss]et(Value|cache)\s+([^=]+)=(.*)/){
			$rt=setcache($to, $2, $3);
		}elsif($mess =~ /^createcache\s+(.+)/){
			$rt=createcache($to, $1);
		}elsif($mess =~ /^CreateValue\s+(\S+)/){
			$rt=createcache("$to.$1", '');
		}elsif($mess =~ /^undefcache\s+(.+)/){
			$rt=undefcache($to, $1);
		}elsif($mess =~ /^UndefValue\s+(\S+)/){
			$rt=undefcache("$to.$1", '');
		}elsif($mess =~ /flgon\s+(\S+)/){
			$rt=flgon($from, $1);
			$mess = 'flgon';
		}elsif($mess =~ /flgoff\s+(\S+)/){
			$rt=flgoff($from, $1);
			$mess = 'flgoff';
		}elsif($mess eq 'listnodes'){
			$rt=listnodes();
		}elsif($mess eq 'LoadValues' or $mess eq 'loadcache'){
			$rt=loadcache();
		}elsif($mess eq 'SaveValues' or $mess eq 'savecache'){
			$rt=savecache();
		}elsif($mess =~ /^[_@]/){
			return;
		}else{
			$::Error = "Bad command or parameter.";
			$rt = '';
		}
	}elsif(defined($::Reg{"$to:"})){
		if($mess eq 'hello'){
			$rt="nice to meet you.";
		}elsif($mess eq 'help'){
			$rt="help hello GetValue SetValue _ChangedValue";
		}elsif($mess eq 'GetValue'){
			$rt=getcache($to, '');
		}elsif($mess =~ /^_ChangedValue\s(.*)/){
			setcache($to, '', $1);
			return;
		}elsif($mess =~ /^SetValue\s(.*)/){
			$rt=setcache($to, '', $1);
		}elsif($mess =~ /^[_@]/){
			return;
		}else{
			$::Error = "Bad command or parameter.";
			$rt = '';
		}
	}else{
		if($mess =~ /^[_@]/){return;}
		$rt='';
		$::Error = "$to is not found in property list.";
		$to = $::NodeName;
	}

## Response ##
	if($rt eq ''){
		$::tak->Send("$to>$from \@$mess Er: $::Error");
		if($::Debug){
			print "STARS SND: $to>$from \@$mess Er: $::Error\n";
		}
	}else{
		$::tak->Send("$to>$from \@$mess $rt");
		if($::Debug){
			print "STARS SND: $to>$from \@$mess $rt\n";
		}
	}
}

sub interval{
	if($::FlgChgd){
		savecache();
	}
}

sub flgon{
	my $from = shift;
	my $node = shift;
	my $key = "$::NodeName.$node:";
	if(!defined($::Reg{$key})){
		$::Error = "$node is not found in property list.";
		return('');
	}
	if($::Flg{$key} =~ /(^| )$from( |$)/){
		$::Error = "Node $node is already in the list.";
		return('');
	}
	my @lst = split(/ /, $::Flg{$key});
	push(@lst, $from);
	$::Flg{$key} = join(" ", @lst);
	return("Node $node has been registered.");
}

sub flgoff{
	my $from = shift;
	my $node = shift;
	my $key = "$::NodeName.$node:";
	if(!defined($::Reg{$key})){
		$::Error = "$node is not found in property list.";
		return('');
	}
	if($::Flg{$key} =~ s/(^| )$from( |$)//){
		return("Node $node has been removed.");
	}
	$::Error = "List is void.";
	return('');
}

sub listnodes{
	my @lst;
	my $lp;
	my $buf;
	for $lp (sort(keys(%::Reg))){
		$buf = $lp;
		if($buf =~ s/^$::NodeName\.(.+):$/$1/){
			push(@lst, $buf);
		}
	}
	return(join(" ", @lst));
}

sub createcache{
	my $node = shift;
	my $property = shift;
	my $key = "$node:$property";
	if(defined($::Reg{$key})){
		$::Error = 'Property already exists.';
		return('');
	}
	$::Reg{$key}='';
	$::Flg{$key}='';
	$::FlgChgd = 1;
	return('Ok:');
}

sub undefcache{
	my $node = shift;
	my $property = shift;
	my $key = "$node:$property";
	unless(defined($::Reg{$key})){
		$::Error = 'There is no property.';
		return('');
	}
	undef($::Reg{$key});
	undef($::Flg{$key});
	$::FlgChgd = 1;
	return('Ok:');
}

sub getcacheregex{
	my $node = shift;
	my $property = shift;

	my $buf;
	my $key;
	my @ckeys = keys(%::Reg);
	@ckeys = grep(/^$node:$property/, @ckeys);
	my @vals = ();

	for $key (@ckeys){
		$buf=$key;
		$buf =~ s/^[^:]+://;
		if(defined($::Reg{$key})){
			push(@vals, "$buf=".$::Reg{$key});
		}
	}
	$buf=join("\t", @vals);

	if($buf eq ''){return('default');}
	return($buf);
}

sub getcache{
	my $node = shift;
	my $property = shift;
	my $key = "$node:$property";
	return($::Reg{$key});
}

sub getkey{
	my $node = shift;
	my $val  = shift;
	my $key;
	my @rtval = ();
	my $buf;

	for $key (keys(%::Reg)){
		if($::Reg{$key} eq $val){
			push(@rtval, $key);
		}
	}
	$buf=join(" ", @rtval);
	$buf =~ s/(^| )$node://g;
	return($buf);
}

sub setcache{
	my $node = shift;
	my $property = shift;
	my $value = shift;
	my $key = "$node:$property";
	if($::Reg{$key} eq $value){
		return('Ok:');
	}
	$::Reg{$key}=$value;
	$::FlgChgd = 1;
	if($::Flg{$key} ne ''){sendevent($key);}
	return('Ok:');
}

sub sendevent{
	my $key = shift;
	my $to;
	my $from = $key;
	unless($from =~ s/^($::NodeName\..+):$/$1/){return;}
	for $to (split(" ", $::Flg{$key})){
		$::tak->Send("$from>$to _ChangedValue $::Reg{$key}");
	}
}

sub loadcache{
	open(BUFREG, $::RegFile);
	while(<BUFREG>){
		chomp;s/\r//;
		if(/^#/){next;}
		if(/^([^=]+)=(.*)/){
			$::Reg{$1} = $2;
		}
	}
	return('Ok:');
}

sub savecache{
	my $lp;
	open(BUFREG, ">$::RegFile");
	for $lp (keys(%::Reg)){
		if(defined($::Reg{$lp})){
			print BUFREG $lp."=".$::Reg{$lp}."\n";
		}
	}
	close(BUFREG);
	$::FlgChgd = 0;
	return('Ok:');
}
