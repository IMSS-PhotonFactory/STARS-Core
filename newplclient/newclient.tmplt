#! /usr/bin/perl

use strict;
use Getopt::Long;
use stars;
#################################################################
# <<client_name>>
$::Version = '$<<Modified>>$';
#
$::Version =~ s/\$//g;
#################################################################
## ToDo: Set parameters here.
$::NodeName   = '<<client_name>>';        #Default node name.
$::Server     = '<<stars_server>>';        #Default stars server.
#################################################################
$::Debug      = ''; #This variable is used for debug mode.
                    # You can use like..
                    # if($::Debug){blha-blah-blah;}

## ToDo: You can set option switchs. See help 'Getopt::Long'.
GetOptions(
'd'      => \$::Debug,
'node=s' => \$::NodeName,
'h'      => \&usage,
) or die "Bad switch.\n";

if($_ = shift(@ARGV)){$::Server = $_;}

## Open Stars server. $::tak is a Stars object.
$::tak = stars->new($::NodeName, $::Server)
	or die "Could not connect Stars server";


$::tak->addcallback(\&handler);
stars->Mainloop();

exit(1);

# Print usage. ---------------------------------------------
sub usage{
## Todo: Please modify help message for "-h" option.

print <<__USAGE__;
$0 $::Version
Usage: $0 [-h] [-d] [-node MyNodeName] [StarsServer]
       -h   Show this help.
       -d   Run with debug mode.
__USAGE__

exit(0);
}


# Command handler from Stars server ------------------------
sub handler{
## ToDo: Please modify handler sub routine.
##  (The handler sub routine will be called when client
##  receives a message from a Stars server.)
## Please substitute return value of your own function into "$rt".
## Or, if "error", please substitute ''.
##  $::Error is used for error message.

	my ($from, $to, $mess) = @_;
	my $rt;
	if($::Debug){
		print "STARS RCV: $from>$to $mess\n";
	}

## Handle received messges ##
	if($mess eq 'hello'){
		$rt="nice to meet you.";
	}elsif($mess eq 'help'){
		$rt="help hello getversion";
	}elsif($mess eq 'getversion'){
		$rt=$::Version;
	}elsif($mess =~ /^[_@]/){
		return;
	}else{
		$::Error = "Bad command or parameter.";
		$rt = '';
	}

## Response ##
	if($rt eq ''){
		$::tak->Send("$to>$from \@$mess Er: $::Error");
		if($::Debug){
			print "STARS SND: $to>$from \@$mess Er: $::Error\n";
		}
	}else{
		$::tak->Send("$to>$from \@$mess $rt"); 
		if($::Debug){
			print "STARS SND: $to>$from \@$mess $rt\n";
		}
	}
}
