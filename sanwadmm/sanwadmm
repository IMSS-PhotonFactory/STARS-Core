#! /usr/bin/perl

use strict;
use Getopt::Long;
use stars;
use nportserv;
$|=1;
#################################################################
# sanwadmm
$::Version  = '$Revision: 1.2 $';
$::Version .= '$Date: 2011-02-17 02:11:37 $';
#
$::Version =~ s/\$//g;
#################################################################
## ToDo: Set parameters here.
$::NodeName   = 'sanwadmm';        #Default node name.
$::Server     = 'localhost';        #Default stars server.
$::AvrgCount    = 20;                #Default average count.
#################################################################
$::Debug      = ''; #This variable is used for debug mode.
                    # You can use like..
                    # if($::Debug){blha-blah-blah;}

@::AvrgBuf      = ();      #Buffer of average
$::PrevFunc    = '';      #Previous function of Dmm
$::Nport;                 #NPortServ

## ToDo: You can set option switchs. See help 'Getopt::Long'.
GetOptions(
'd'      => \$::Debug,
'node=s' => \$::NodeName,
'h'      => \&usage,
) or die "Bad switch.\n";

if($_ = shift(@ARGV)){$::NodeName = $_;}
require 'config.pl';

$::Nport = nportserv->new($::NPORT_HOST, $::NPORT_PORT)
  or die "Failed connection to $::NPORT_HOST/$::NPORT_PORT\n";

## Open Stars server. $::tak is a Stars object.

$::tak = stars->new($::NodeName, $::Server)
	or die "Could not connect Stars server";

$::tak->addcallback(\&ProcessAvg, $::Nport->{'sport'}, 'Lf');
$::tak->addcallback(\&handler);

ClearAvrg();

stars->Mainloop();

exit(1);

# Print usage. ---------------------------------------------
sub usage{
## Todo: Please modify help message for "-h" option.

print <<__USAGE__;
$0 $::Version
Usage: $0 [-h] [-d] [-node MyNodeName] [StarsServer]
       -h   Show this help.
       -d   Run with debug mode.
__USAGE__

exit(0);
}


# Command handler from Stars server ------------------------
sub handler{
## ToDo: Please modify handler sub routine.
##  (The handler sub routine will be called when client
##  receives a message from a Stars server.)
## Please substitute return value of your own function into "$rt".
## Or, if "error", please substitute ''.
##  $::Error is used for error message.

	my ($from, $to, $mess) = @_;
	my $rt;
	if($::Debug){
		print "STARS RCV: $from>$to $mess\n";
	}

## Handle received messges ##
	if($mess eq 'hello'){
		$rt="nice to meet you.";
	}elsif($mess eq 'help'){
		$rt="help hello getversion GetValue GetFunction GetAvrgValue ClearAvrg GetAvrgCount SetAvrgCount IsAvrgReady";
	}elsif($mess eq 'getversion'){
		$rt=$::Version;
	}elsif($mess eq 'GetValue'){
		$rt=GetValue();
	}elsif($mess eq 'GetFunction'){
		$rt=GetFunction();
	}elsif($mess eq 'GetAvrgValue'){
		$rt=GetAvrgValue();
	}elsif($mess eq 'ClearAvrg'){
		$rt=ClearAvrg();
	}elsif($mess eq 'GetAvrgCount'){
		$rt=$::AvrgCount;
	}elsif($mess =~ 'SetAvrgCount (\d+)'){
		$rt=SetAvrgCount($1);
	}elsif($mess eq 'IsAvrgReady'){
		if(scalar(@::AvrgBuf) == $::AvrgCount){$rt=1;}else{$rt=0;}
	}elsif($mess =~ /^[_@]/){
		return;
	}else{
		$::Error = "Bad command or parameter.";
		$rt = '';
	}

## Response ##
	if($rt eq ''){
		$::tak->Send("$to>$from \@$mess Er: $::Error");
		if($::Debug){
			print "STARS SND: $to>$from \@$mess Er: $::Error\n";
		}
	}else{
		$::tak->Send("$to>$from \@$mess $rt"); 
		if($::Debug){
			print "STARS SND: $to>$from \@$mess $rt\n";
		}
	}
}

sub ProcessAvg{
	my $buf=shift;
	if(scalar(@::AvrgBuf) >= $::AvrgCount){return;}
	$buf =~ s/\r//;
	my $func;
	my $val;
	($func, $val) = split(/,/, $buf);
	if($::PrevFunc ne $func){
		@::AvrgBuf = ();
		$::PrevFunc = $func;
	}
	push(@::AvrgBuf, $val);
	if(scalar(@::AvrgBuf) == $::AvrgCount){
		$::tak->Send("System _ChangedAvrgReady 1");
	}

#	print "$buf,  ", scalar(@::AvrgBuf)."\n";
}

sub GetValue{
	my $buf;
	$buf = $::Nport->InSIO(2);
	#Avoid input error.
	unless($buf =~ /[^,]+,[^,]+/){
		$buf = $::Nport->InSIO(2);
	}

	ProcessAvg($buf);
	my $val;
	(undef, $val) = split(/,/, $buf);
	if($val eq ''){$::Error = 'IO Error';}
	return($val);
}

sub GetFunction{
	my $buf;
	$buf = $::Nport->InSIO(2);
	#Avoid input error.
	unless($buf =~ /[^,]+,[^,]+/){
		$buf = $::Nport->InSIO(2);
	}

	ProcessAvg($buf);
	my $val;
	($val, undef) = split(/,/, $buf);
	if($val eq ''){$::Error = 'IO Error';}
	return($val);
}

sub ClearAvrg{
	if(scalar(@::AvrgBuf) == $::AvrgCount){
		$::tak->Send("System _ChangedAvrgReady 0");
	}
	@::AvrgBuf = ();
	return('Ok:');
}

sub GetAvrgValue{
	if(scalar(@::AvrgBuf) < $::AvrgCount){
		$::Error = 'Data is not ready';
		return('');
	}
	my $lp;
	my $aval = 0;
	for($lp = 0; $lp < $::AvrgCount; $lp++){
		$aval += $::AvrgBuf[$lp];
	}
	return(sprintf("%5.3E",$aval/$::AvrgCount))
}

sub SetAvrgCount{
	$::AvrgCount = shift;
	ClearAvrg();
	return('Ok:');
}
