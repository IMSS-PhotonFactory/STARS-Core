#! /usr/bin/perl

#########################################################################
#TakaServer for stars
$::Version='1.8';
# 2001-09-24 Takashi Kosuge
#########################################################################
#Setting for system
use constant HOSTLIST    => $0.'-lib/allow.cfg';
use constant ALIASES     => $0.'-lib/aliases.cfg';
use constant IDKEYSDIR   => $0.'-lib/';
use constant DEFAULTPORT => <<DefaultPort>>;
use constant RNDMAX      => 10000;
#########################################################################

use IO::Socket;
use IO::Select;
use Symbol;
use strict;

$::Port=shift()*1;
unless($::Port){$::Port = DEFAULTPORT;}

%::Node=();        #node name and file handle, name is key, handle is value
%::NodeH=();       #file handle and node name, handle is key, name is value
%::NodeBuf=();     #node input buffer
#%::NodeFlgOn=();   #node list which requests event message from this node
%::NodeFlgOn=();   #node list which sends event message to this node
%::NodeIDKey =();  #KeyNumber from server
%::AliasReal =();  #alias list, key is aliase
%::RealAlias =();  #alias list, key is real name

#$::Xfh,$::Xbuf    #Buffer for printing

my $new_sock;
my $bufhn;
my $fromnode;
my $tonode;
my $buf;
my $ready;
my $s;

##Initialize--------------------------------------------------
srand(time() ^ ($$ + ($$ <<15)) );
system_loadaliases();

my $listener = 
      IO::Socket::INET->new(
        LocalPort => $::Port, Proto => 'tcp', Listen => 5, Reuse => 1 );
    die "Can't create socket for listening: $!" unless $listener;

my $readable = IO::Select->new;     # Create a new IO::Select object
$readable->add($listener);          # Add the listener to it

#-----------------main----------------------------
while(1) {
	($ready) = IO::Select->select($readable, undef, undef, undef);
	foreach $s (@$ready) {
		if($s == $listener) {
			$new_sock = $listener->accept;
			if($new_sock){
				select($new_sock);$|=1;select(STDOUT);
				$readable->add($new_sock);
				$bufhn = system_gethostname($new_sock);
				unless(system_checkhost(HOSTLIST,$bufhn)){
					printh($new_sock, "Bad host. $bufhn\n");
					$readable->remove($new_sock);
					$new_sock->close;
				}
				$::NodeBuf{$new_sock}='';
				$::NodeIDKey{$new_sock}=get_nodeidkey();
				printh($new_sock,$::NodeIDKey{$new_sock}."\n");
			}
		} else {  # It is an established connection
			if( sysread($s,$buf,512) ){
				$::NodeBuf{$s} .= $buf;
				while($::NodeBuf{$s} =~ s/([^\r\n]*)\r*\n//){
					$buf=$1;
					if ($buf =~ /^(exit|quit)$/i) {
						printh($s, "System>$::NodeH{$s} \@quit\n");
						delnode($s);
						$readable->remove($s);
						$s->close;
					} elsif(exists $::NodeH{$s}){
						sendmes($s,"$buf");
					} else {
						unless(addnode($s,"$buf")){
							delete $::NodeBuf{$s};
							delete $::NodeIDKey{$s};
							$readable->remove($s);
							$s->close;
						}
					}
				}
			} else { # The client disconnected.
				delnode($s);
				$readable->remove($s);
				$s->close;
			}
		}
	}
}

exit(0);

#Check host for node-----------------------------------------------------
sub check_term_and_host{
	my $nd=shift; #nodename
	my $hd=shift; #handle

	unless(-e IDKEYSDIR.$nd.'.allow'){
		return(1);
	}
	if(system_checkhost(IDKEYSDIR.$nd.'.allow', system_gethostname($hd))){
		return(1);
	}
	return(0);
}

#Check Node Key---------------------------------------------------------------
sub check_nodekey{
	my $nname=shift;
	my $nkeynum=shift;
	my $nkeyval=shift;

	my $kcount=0;
	my $lp;

	my $hd = gensym();
	open($hd, IDKEYSDIR."$nname.key") or return('');
	while(<$hd>){$kcount++;}
	unless($kcount){close($hd); return('');}
	$kcount = $nkeynum % $kcount;
	seek($hd, 0, 0);
	for($lp=0; $lp < $kcount; $lp++){$_=<$hd>;}
	$_=<$hd>;
	chomp;s/\r//;
	close($hd);
	if($_ eq $nkeyval){return(1);}
	return('');
}

#Make Idkey-------------------------------------------------------------------
sub get_nodeidkey{
 return( int(rand RNDMAX) );
}


#Print-------------------------------------------------------------------------
sub printh{
	($::Xfh,$::Xbuf) = @_;
	print $::Xfh "$::Xbuf";
	if(defined $::Node{'Debugger'}){
		my $handle=$::Node{'Debugger'};
		print $handle "$::Xbuf";
	}
}

#-----------------------------------------------------------------------------
sub sendmes{
	my($handle,$buf)=@_;
	my $tonode;
	my $tonodes;
	my $tonodeh;
	my $fromnode=$::NodeH{$handle};

	if($buf =~ s/^([a-zA-Z_0-9.\-]+)>//){
		$fromnode=$1;
	}
	unless($buf =~ s/^([a-zA-Z_0-9.\-]+)\s*//){
		printh($handle, "System>$fromnode> \@\n");
		return(1);
	}
	$tonodes = $1;
	if(defined $::AliasReal{$tonodes}){
		$tonodes = $::AliasReal{$tonodes};
	}
	$tonode = $tonodes;
	$tonode =~ s/\..*//;
	if($tonode eq 'System'){
		return system_commands($handle,$fromnode,"$buf");
	}
	unless(exists $::Node{$tonode}){
		unless($buf =~ /^[_@]/){
			printh($handle, "System>$fromnode \@$buf Er: $tonode is down.\n");
		}
		return('');
	}

	if(defined $::RealAlias{$fromnode}){
		$fromnode=$::RealAlias{$fromnode};
	}

	$tonodeh=$::Node{$tonode};
	printh($tonodeh,  "$fromnode>$tonodes $buf\n");
	return(1);
}

#------System Commands--------------------------------------------------
sub system_commands{
	my ($hd,$frn,$cmd) = @_;
		if($cmd =~ /^_/){
			system_event($frn,$cmd);
		}elsif($cmd =~ s/^flgon //){
			system_flgon($hd,$frn,$cmd);
		}elsif($cmd =~ s/^flgoff //){
			system_flgoff($hd,$frn,$cmd);
		}elsif($cmd eq 'loadaliases'){
			system_loadaliases();
			printh($hd, "System>$frn \@loadaliases Aliases has been loaded.\n");
		}elsif($cmd eq 'listaliases'){
			printh($hd, "System>$frn \@listaliases ".system_listaliases()."\n");
		}elsif($cmd eq 'listnodes'){
			printh($hd, "System>$frn \@listnodes ".system_listnodes()."\n");
		}elsif($cmd eq 'gettime'){
			printh($hd, "System>$frn \@gettime ".system_gettime()."\n");
		}elsif($cmd eq 'hello'){
			printh($hd, "System>$frn \@hello Nice to meet you.\n");
		}elsif($cmd eq 'getversion'){
			printh($hd, "System>$frn \@getversion $::Version\n");
		}elsif($cmd eq 'help'){
			printh($hd, "System>$frn \@help loadaliases listaliases listnodes gettime hello getversion\n");
		}else{
			printh($hd, "System>$frn \@$cmd Er: Command is not found or  parameter is not enough.\n");
		}
		return(1);
}

sub system_event{
	my ($frn,$cmd) = @_;
	if(defined $::RealAlias{$frn}){$frn = $::RealAlias{$frn};}
	my $buffh;
	foreach (keys(%::NodeFlgOn)){
		if($::NodeFlgOn{$_} =~ / $frn /){
			$buffh = $::Node{$_};
			printh($buffh, "$frn>$_ $cmd\n");
		}
	}
}

sub system_flgon{
	my ($hd,$frn,$cmd) = @_;
	unless($cmd =~ /^([a-zA-Z_0-9.\-]+)/){
		printh($hd, "System>$frn \@flgon Er: Parameter is not enough.\n");
		return('');
	}
	$cmd = $1;
	if(defined $::NodeFlgOn{$frn}){
		if($::NodeFlgOn{$frn} =~ / $cmd /){
			printh($hd, "System>$frn \@flgon Er: Node $cmd is already in the list.\n");
			return('');
		}
		$::NodeFlgOn{$frn} .= " $cmd ";
		printh($hd, "System>$frn \@flgon Node $cmd has been registered.\n");
		return(1);
	}
	$::NodeFlgOn{$frn} = " $cmd ";
	printh($hd, "System>$frn \@flgon Node $cmd has been registered.\n");
	return(1);
}

sub system_flgoff{
	my ($hd,$frn,$cmd) = @_;
	unless($cmd =~ /^([a-zA-Z_0-9.\-]+)/){
		printh($hd, "System>$frn \@flgoff Er: Parameter is not enough.\n");
		return('');
	}
	$cmd = $1;
	unless(defined $::NodeFlgOn{$frn}){
		printh($hd, "System>$frn \@flgoff Er: List is void.\n");
		return('');
	}
	unless($::NodeFlgOn{$frn} =~ s/ $cmd //){
		printh($hd, "System>$frn \@flgoff Er: Node $cmd is not in the list.\n");
		return('');
	}
	unless($::NodeFlgOn{$frn}){
		delete $::NodeFlgOn{$frn};
	}
	printh($hd, "System>$frn \@flgoff Node $cmd has been removed.\n");
	return(1);
}

sub system_listaliases{
	my $buf='';
	my $lp;
	foreach $lp (keys(%::AliasReal)){
		$buf .= " $lp,".$::AliasReal{$lp};
	}
	return($buf);
}

sub system_listnodes{
	return(join(" ",keys(%::Node)));
}

sub system_gettime{
my $tm = shift(@_);
if($tm eq ''){$tm=time();}
my @tt = localtime($tm);
return(sprintf("%04d-%02d-%02d %02d:%02d:%02d",
$tt[5]+1900,$tt[4]+1,$tt[3],$tt[2],$tt[1],$tt[0]));
}

#-----------------------------------------------------------------------
sub addnode{
	my($handle,$buff) = @_;
	my $buffh;
	my($node,$idmess)=split(/\s+/,$buff);
	if(exists $::Node{$node}){
		printh($handle, "System> Er: $node already exists.\n");
		return('');
	}
	unless(check_term_and_host($node,$handle)){
		printh($handle, "System> Er: Bad host for $node\n");
		return('');
	}
	unless(check_nodekey($node,$::NodeIDKey{$handle},$idmess)){
		printh($handle, "System> Er: Bad node name or key\n");
		return('');
	}
	$::Node{$node} = $handle;
	$::NodeH{$handle} = $node;
	printh($handle, "System>$node Ok:\n");

#Send connected messge to listening nodes
	if(defined $::RealAlias{$node}){$node = $::RealAlias{$node};}
	foreach (keys(%::NodeFlgOn)){
		if($::NodeFlgOn{$_} =~ / $node /){
			$buffh = $::Node{$_};
			printh($buffh, "$node>$_ _Connected\n");
		}
	}
	return(1);
}

sub delnode{
	my $handle = shift(@_);
	my $buffh;
	my $node = $::NodeH{$handle};

# reset my self
	delete $::NodeH{$handle};
	delete $::Node{$node};
	delete $::NodeBuf{$handle};
	delete $::NodeIDKey{$handle};
	delete $::NodeFlgOn{$node};

# Send disconnected messge to listening nodes
	if(defined $::RealAlias{$node}){$node = $::RealAlias{$node};}
	foreach (keys(%::NodeFlgOn)){
		if($::NodeFlgOn{$_} =~ / $node /){
			$buffh = $::Node{$_};
			printh($buffh, "$node>$_ _Disconnected\n");
		}
	}
}

#------ Set Aliases  ------------------------------------
sub system_loadaliases{
	%::AliasReal =();
	%::RealAlias =();
	my ($alias,$real);
	my $RD = gensym();
	open($RD,ALIASES);
	while(<$RD>){
		if(/^#/){next;}
		chomp;s/\r//;
		($alias,$real)=split(/\s+/,$_);
		$::AliasReal{$alias}=$real;
		$::RealAlias{$real}=$alias;
	}
	close($RD);
	return(1);
}
#------ Get Hostname ------------------------------------
sub system_gethostname{
	my $s = shift(@_);
	my $host;
	$host=gethostbyaddr($s->peeraddr(),AF_INET);
	unless($host){
		$host=$s->peerhost();
	}
	return($host);
}

#------ Check Host --------------------------------------
sub system_checkhost{
	my $l = shift(@_);
	my $h = shift(@_);
	my $RD;
	
	$RD = gensym();
	open($RD,"$l");
	while(<$RD>){
		chop;s/\r//;
		if($h eq $_){
			close($RD);
			return(1);
		}
	}
	close($RD);
	return(0);
}

