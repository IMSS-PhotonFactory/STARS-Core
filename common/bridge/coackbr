#! /usr/bin/perl

###############################################################
#  COACK Bridge Ver.1.4a
#  Takashi Kosuge 2000-08-25
###############################################################
use constant INIFILE  => $0.'-lib/coackbr.cfg';
use constant DEBUGLEVEL => 0;
###############################################################
use IO::Socket;
use IO::Select;
use strict;
use Symbol;
use XML::Parser;
use easynode;

my $buf;    #buffer input and output
my $readable;
my $ready;
my $s;
my $enode;   #easy node device
my $p;       #xml buffer
$::el='';    #element name of XML
%::XVar=();  #XML variable
%::DefV=();  #Definition
%::XML=();   #Template XML
%::TXT=();   #Template Text
$::Terms=''; #Online terminal list
%::Hbuf=();  #file handle buffer

system_getdefs();
system_loadtemplate();



###Open simpletalk---------------------------------------

$enode = easynode->new($::DefV{IOCName}
						,$::DefV{SlHost}
						,$::DefV{SlPort}
						,$::DefV{SlKeyFile}) or die;

$::sl = $enode->gethandle();

#new IO::Socket::INET(PeerAddr=>$::DefV{SlHost}, PeerPort=>$::DefV{SlPort}, Proto=>'tcp')
#||die "Socket: $!\n";
#select($::sl);$|=1;select(STDOUT);
#
#print $::sl $::DefV{IOCName}."\n";
#$buf=<$::sl>;chop($buf);s/\r//;
#unless($buf =~ /Ok:$/){
#	close($::sl);
#	die "$buf\n";
#}

###Open COACK --------------------------------------------------
$::ck =
new IO::Socket::INET(PeerAddr=>$::DefV{CkHost}, PeerPort=>$::DefV{CkPort}, Proto=>'tcp')
||die "Socket: $!\n";
select($::ck);$|=1;select(STDOUT);


$readable = IO::Select->new;
$readable->add($::sl);
$readable->add($::ck);

###Setup XML parser
$::p = new XML::Parser(Handlers => {Start => \&handle_start,
				End => \&handle_end});



while(1) {
	($ready) = IO::Select->select($readable, undef, undef, undef);
	foreach $s (@$ready) {
		if(sysread($s,$buf,128)){
			$::Hbuf{$s} .= $buf;
			while($::Hbuf{$s} =~ s/([^\r\n]*)\r*\n//){
				$buf=$1;
				if($s == $::ck){
					ck_handle("$buf");
				}elsif($s == $::sl){
					sl_handle("$buf");
				}
			}
		}
	}
}

exit(1);



##Handle strings from coack ------------------------------------
sub ck_handle{
	my($buf)=@_;
	my $tp;
	my $nodeto;
	my $nodefrom;
	my $l;
	my $iocname = $::DefV{IOCName};
	$::el='';
	%::XVar=();
#
if(DEBUGLEVEL){print "Receive: $buf\n";}

	unless($buf =~ /<\?xml version='1\.0'\?>/){
		return('');
	}
	eval('$::p->parse($buf)');
	if($@ and DEBUGLEVEL){print "Parse Error:$@\n $buf\n";}

	if($::XVar{':Command.IsResponse'} eq 'True'){
		$nodeto = $::XVar{':Command:FromDevice:NodeDefinition.ID'};
		unless($::Terms =~ / $nodeto /){
			return('');
		}
		$nodefrom = $::XVar{':Command:ToDevice:NodeDefinition.ID'};
		if(
		$::XVar{':Command:ToDevice:DeviceMethod.MethodID'}
		eq 'WatchDataChanged'){
			$tp = $::TXT{changed};
		}else{
			$tp = $::TXT{response};
		}
	}else{
		$nodeto = $::XVar{':Command:ToDevice:NodeDefinition.ID'};
		unless($::Terms =~ / $nodeto /){
			return('');
		}
		$nodefrom = $::XVar{':Command:FromDevice:NodeDefinition.ID'};
		$tp = $::TXT{receive};
	}

	foreach $l (keys(%::XVar)){
		$tp =~ s/$l/$::XVar{$l}/g;
	}
	print $::sl "$iocname.$nodefrom>$nodeto $tp\n";
}

sub handle_start{
	my ($xx,$element,@in) = @_;
	my $k;
	my $v;
	
	$::el .= ":$element";
	while(1){
		unless($k = shift(@in)){last;}
		$v=shift(@in);
		$::XVar{"$::el.$k"}=$v;
	}
}

sub handle_end{
	my ($xx,$element) = @_;
	$::el =~ s/:$element$//;
}


##Handle strings form simpletalk ------------------------------
sub sl_handle{
	my $buf = shift(@_);
	my $fromdev;
	my $todevs;
	my $todev;
	
	if($buf =~ s/^([a-zA-Z_0-9.\-]+)>([a-zA-Z_0-9.\-]+) *//){
		$fromdev=$1;
		$todevs=$2;
	}
	if($fromdev eq 'System'){return();}
	$todev = $todevs;
	$todev =~ s/^\w+\.//;
	if($buf eq 'create'){
		return(sl_create($fromdev,$todev,$todevs));
	}elsif($buf eq 'remove'){
		return(sl_remove($fromdev,$todev,$todevs));
	}elsif($buf eq 'reloadsetting'){
		system_loadtemplate();
		print $::sl "$todevs>$fromdev \@reloadsetting "
				."Template has been reloaded.\n";
		return(1);
	}elsif($todev){
		return(sl_command($fromdev,$todev,$todevs,"$buf"));
	}
}

sub sl_command{
	my($fromdev,$todev,$todevs,$buf)=@_;
	my($cm,@pr)=split(/\s+/,$buf);
	my $xbuf;
	my $l;
	my $pn =0;
	my $iocname = $::DefV{IOCName};
	my $time;
	my $coackdev;
	my $coacknode;

	
	unless($::Terms =~ / $fromdev /){
		print $::sl "$todevs>$fromdev \@$cm Er: Session is not created.\n";
		return('');
	}
	if(!defined $::XML{$cm}){
		print $::sl "$todevs>$fromdev \@$cm Er: Command is not found.\n";
		return('');
	}

	$coackdev = $todev;
	$coackdev =~ s/\.(\w+)$//;
	$coacknode = $1;

	$time = ksg_localtime();
	$xbuf = $::XML{$cm};
	$xbuf =~ s/#TIME#/$time/g;
	$xbuf =~ s/#IOCNAME#/$iocname/g;
	$xbuf =~ s/#TERMFROM#/$fromdev/g;
	$xbuf =~ s/#TERMTO#/$todev/g;
	$xbuf =~ s/#DEVICETO#/$coackdev/g;
	$xbuf =~ s/#NODETO#/$coacknode/g;

	foreach $l (@pr){
		$pn++;
		$xbuf =~ s/#P$pn#/$l/g;
	}
	if($xbuf =~ /#\w+#/){
		print $::sl "$todevs>$fromdev \@$cm Er: Parameter is not enough.\n";
		return('');
	}
#
if(DEBUGLEVEL){print "Send: $xbuf\n";}

	print $::ck "$xbuf\n";
	if($::DefV{CkInterval}){select(undef,undef,undef,$::DefV{CkInterval});}
	return(1);
}

sub sl_create{
	my($fromdev,$todev,$todevs)=@_;
	my $buf;
	my $iocname = $::DefV{IOCName};

	if($::Terms =~ / $fromdev /){
		print $::sl "$todevs>$fromdev \@create Er: Session $fromdev ".
			"already exists.\n";
		return('');
	}
	$::Terms .= " $fromdev ";

	$buf=$::XML{create};
	$buf =~ s/#IOCNAME#/$iocname/g;
	$buf =~ s/#TERMFROM#/$fromdev/g;
	print $::ck "$buf\n";
	if($::DefV{CkInterval}){select(undef,undef,undef,$::DefV{CkInterval});}
	print $::sl "$todevs>$fromdev \@create Session $fromdev "
			."has been created.\n";
}


sub sl_remove{
	my($fromdev,$todev,$todevs)=@_;
	my $buf;
	my $iocname = $::DefV{IOCName};

	unless($::Terms =~ / $fromdev /){
		print $::sl "$todevs>$fromdev \@remove Er: Session $fromdev "
			."does not exist.\n";
		return('');
	}
	$::Terms =~ s/ $fromdev //;

	$buf=$::XML{remove};
	$buf =~ s/#IOCNAME#/$iocname/g;
	$buf =~ s/#TERMFROM#/$fromdev/g;
	print $::ck "$buf\n";
	if($::DefV{CkInterval}){select(undef,undef,undef,$::DefV{CkInterval});}
	print $::sl "$todevs>$fromdev \@remove Session $fromdev "
		."has been removed.\n";
}

##Load template-------------------------------------------------
sub system_loadtemplate{
	my $l;
	my $buf;
	my $cn;
	my @files;
	my $RD = gensym();

#set XML templates.
	opendir($RD,$::DefV{DevFile}) or return('');
	@files = grep(/.xml$/,readdir($RD));
	closedir($RD);
	%::XML=();
	foreach $l (@files){
		$buf='';
		$cn=$l;
		$cn =~ s/\.xml$//;
		open($RD,$::DefV{DevFile}."/$l");
		while(<$RD>){
			chomp;s/\r//;
			s/^\s+//;
			if($_ eq ''){next;}
			if(/^#/){next;}
			$buf .= "$_";
		}
		close($RD);
		$::XML{$cn} = $buf;
	}

#set receive templete
	%::TXT=();
	open($RD,$::DefV{DevFile}."/receive.txt");
	$buf='';
	while(<$RD>){
		chomp;s/\r//;
		if($_ eq ''){next;}
		if(/^#/){next;}
		$buf .= "$_";
	}
	close($RD);
	$::TXT{receive} = $buf;

#set response templete
	open($RD,$::DefV{DevFile}."/response.txt");
	$buf='';
	while(<$RD>){
		chomp;s/\r//;
		if($_ eq ''){next;}
		if(/^#/){next;}
		$buf .= "$_";
	}
	close($RD);
	$::TXT{response} = $buf;


#set changed templete
	open($RD,$::DefV{DevFile}."/changed.txt");
	$buf='';
	while(<$RD>){
		chomp;s/\r//;
		if($_ eq ''){next;}
		if(/^#/){next;}
		$buf .= "$_";
	}
	close($RD);
	$::TXT{changed} = $buf;

}

##Get defs---------------------------------------------------
sub system_getdefs{
	my $RD;
	my ($k,$v);
	$RD = gensym();
	open($RD,INIFILE) or die "Config: $!\n";
	while(<$RD>){
		if(/^#/){next;}
		chomp;s/\r//;
		($k,$v)=split('=',$_);
		$k=~s/^\s+//; $k=~s/\s+$//;
		$v=~s/^\s+//; $v=~s/\s+$//;
		$::DefV{"$k"}="$v";
	}
}

#-- Get "yyyy-mm-dd hh:mm:ss" style date -------------------------
sub ksg_localtime{
my $tm = shift(@_);
if($tm eq ''){$tm=time();}
my @tt = localtime($tm);
return(sprintf("%04d-%02d-%02d %02d:%02d:%02d",
$tt[5]+1900,$tt[4]+1,$tt[3],$tt[2],$tt[1],$tt[0]));
}

